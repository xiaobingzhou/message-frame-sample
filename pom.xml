<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.5.RELEASE</version>
        <relativePath /> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.github.xiaobingzhou</groupId>
    <artifactId>message-frame-sample</artifactId>
    <version>1.1.4</version>

    <properties>
        <!-- aliyun 镜像地址: registry.cn-beijing.aliyuncs.com/xiaobingzhou-->
        <!--<docker.image.prefix>registry.cn-beijing.aliyuncs.com/xiaobingzhou</docker.image.prefix>-->
        <!--<docker.server.id>docker-aliyun</docker.server.id>-->
        <!-- docker hub镜像地址: docker.io/xiaobingzhou -->
        <docker.image.prefix>xiaobingzhou</docker.image.prefix>
        <docker.server.id>docker-hub</docker.server.id>
        <!--安装了docker的服务器地址，同时docker需要打开远程连接端口2375-->
        <docker.image.host>http://localhost:2375</docker.image.host>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.github.xiaobingzhou</groupId>
            <artifactId>message-frame</artifactId>
            <version>1.6.3.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.0</version>
                <configuration>
                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                    <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
                    <dockerHost>${docker.image.host}</dockerHost>
                    <imageTags>
                        <!-- docker的tag为项目版本号 -->
                        <imageTag>${project.version}</imageTag>
                    </imageTags>
                    <!-- 此serverId需要和settings.xml中的server的id相对应-->
                    <serverId>${docker.server.id}</serverId>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
                <executions>
                    <!--执行 mvn package 时 自动 执行 mvn docker:build-->
                    <!--<execution>-->
                        <!--<id>build-image</id>-->
                        <!--<phase>package</phase>-->
                        <!--<goals>-->
                            <!--<goal>build</goal>-->
                        <!--</goals>-->
                    <!--</execution>-->
                </executions>
                <!-- 运行命令 mvn clean package docker:build 打包并生成docker镜像 -->
            </plugin>
        </plugins>

    </build>
</project>
